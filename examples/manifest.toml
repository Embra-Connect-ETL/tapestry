# Whether the placeholder in queries should use `posargs` (positional
# arguments) or `variables` syntax
placeholder = "posargs"

# Where the rendered sql files will be created. The paths must be
# relative to this manifest file.
[output_dir]
queries = "output/sql"
tests = "output/tests"

[[templates]]
path = "sql/songs.sql.j2"
all_conds = [ "artist", "file_format", "album_name" ]

[[queries]]
id = "songs@artist+album"
template = "sql/songs.sql.j2"
conds = [ "artist", "album_name" ]
output = "songs__artist__album.sql"

[[queries]]
id = "songs@artist&file_format+album"
template = "sql/songs.sql.j2"
conds = [ "artist", "album_name", "file_format" ]
# check if it's viable to compute the output filename based on the
# id. E.g. by separating different groups (@, +) by double underscore
# and items in each group by hyphen
output = "songs__artist-file_format__album.sql"

[[tests]]
query = "songs@artist&file_format+album"
template = "sql/songs_test.sql.j2"
# By default prepared_statement would be considered true, but if
# false, then `params` need to be set. Basically if prepared_statement
# is true, then the user is able to write the params in the test
# template file itself as arguments to the `EXECUTE` call. But if it's
# false, then the sql query needs to be rendered from the template and
# included in the test template.
prepared_statement = false
params = { artist = "Iron Maiden" }
output = "test_<queryname><n>.sql"
# Variables that will be available inside the test template
#
#    1. prepared_statement (if prepared_statement = true)
#    2. query (if prepared_statement = false)
#    3. var for each key defined in the params (if prepared_statement = false)
#

[[tests]]
query = "songs@artist&file_format+album"
template = "sql/songs_test.sql.j2"
# prepared_statement = true




